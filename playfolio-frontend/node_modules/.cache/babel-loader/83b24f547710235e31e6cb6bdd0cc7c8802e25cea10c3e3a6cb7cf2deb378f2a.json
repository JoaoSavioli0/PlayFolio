{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport axios from 'axios';\nexport default {\n  name: \"Jogos\",\n  data() {\n    return {\n      jogos: [],\n      genreIds: [],\n      genresNomes: {},\n      capasJogos: {},\n      plataformasJogos: {},\n      plataformasMapping: {}\n    };\n  },\n  mounted() {\n    this.carregaJogos();\n  },\n  methods: {\n    async carregaJogos() {\n      const body = `fields *; sort value desc; limit 6; sort rating_count desc;`;\n      try {\n        const response = await axios.post(\"/v4/games\", body, {\n          headers: {\n            'Accept': 'application/json',\n            'Client-ID': \"i79ndcjylui2396ezi2v752sc9dze0\",\n            'Authorization': `Bearer h6v8ywcqhwyyhj140u70v95rss6sga`,\n            'Content-Type': 'text/plain'\n          }\n        });\n        this.jogos = response.data;\n        console.log(\"this.jogos: \" + JSON.stringify(this.jogos));\n        await this.carregaCapas(this.jogos.map(e => e.id));\n        await this.carregaTags(this.jogos);\n        await this.carregaPlataformas(this.jogos);\n      } catch (error) {\n        console.error(\"Erro: \" + error);\n      }\n    },\n    async carregaCapas(jogosId) {\n      const requests = jogosId.map(async id => {\n        const body = `fields url; where game = ${id}; limit 1;`;\n        try {\n          const response = await axios.post(\"/v4/covers\", body, {\n            headers: {\n              'Accept': 'application/json',\n              'Client-ID': \"i79ndcjylui2396ezi2v752sc9dze0\",\n              'Authorization': `Bearer h6v8ywcqhwyyhj140u70v95rss6sga`,\n              'Content-Type': 'text/plain'\n            }\n          });\n          let imagem = response.data[0];\n          if (imagem && imagem.url) {\n            this.capasJogos[id] = imagem.url.replace(\"thumb\", \"720p\");\n          }\n          console.log(\"this.capaJogos: \" + this.capasJogos);\n        } catch (error) {\n          console.error(\"Erro carregando imagem: \" + error);\n        }\n      });\n      await Promise.all(requests);\n    },\n    async carregaTags(jogos) {\n      for (let jogo of jogos) {\n        for (let genreId of jogo.genres) {\n          if (!this.genreIds.includes(genreId)) {\n            this.genreIds.push(genreId);\n          }\n        }\n      }\n      const body = `fields name; where id = (${this.genreIds.join(\", \")});`;\n      try {\n        const response = await axios.post(\"/v4/genres\", body, {\n          headers: {\n            'Accept': 'application/json',\n            'Client-ID': \"i79ndcjylui2396ezi2v752sc9dze0\",\n            'Authorization': `Bearer h6v8ywcqhwyyhj140u70v95rss6sga`,\n            'Content-Type': 'text/plain'\n          }\n        });\n        for (let data of response.data) {\n          this.genresNomes[data.id] = data.name;\n        }\n      } catch (error) {\n        console.error(\"Erro carregando generos: \" + error);\n      }\n      console.log(\"genreNomes: \" + this.genresNomes);\n    },\n    formataDataUnix(dataUnix) {\n      const timestamp = dataUnix;\n      const data = new Date(timestamp * 1000);\n      const options = {\n        year: 'numeric'\n      };\n      return data.toLocaleString('pt-BR', options);\n    },\n    async carregaPlataformas(jogos) {\n      let platformIds = [];\n      for (let jogo of jogos) {\n        for (let platformId of jogo.platforms) {\n          if (!platformIds.includes(platformId)) {\n            platformIds.push(platformId);\n          }\n        }\n      }\n      const body = `fields abbreviation, alternative_name, platform_family; where id = (${this.platformIds.join(\", \")});`;\n      try {\n        const response = await axios.post(\"/v4/platforms\", body, {\n          headers: {\n            'Accept': 'application/json',\n            'Client-ID': \"i79ndcjylui2396ezi2v752sc9dze0\",\n            'Authorization': `Bearer h6v8ywcqhwyyhj140u70v95rss6sga`,\n            'Content-Type': 'text/plain'\n          }\n        });\n        for (let data of response.data) {\n          this.plataformasJogos[data.id] = data.platform_family;\n        }\n        console.log(\"Plataformas: \" + this.plataformasJogos);\n      } catch (error) {\n        console.error(\"Erro carregando plataformas: \" + error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","jogos","genreIds","genresNomes","capasJogos","plataformasJogos","plataformasMapping","mounted","carregaJogos","methods","body","response","post","headers","console","log","JSON","stringify","carregaCapas","map","e","id","carregaTags","carregaPlataformas","error","jogosId","requests","imagem","url","replace","Promise","all","jogo","genreId","genres","includes","push","join","formataDataUnix","dataUnix","timestamp","Date","options","year","toLocaleString","platformIds","platformId","platforms","platform_family"],"sources":["C:\\Users\\joao.savioli\\Documents\\GitHub\\PlayFolio\\Playfolio project\\playfolio-frontend\\src\\components\\JogosComponent.vue"],"sourcesContent":["<template>\r\n    <div class=\"py-6 px-24\">\r\n        <div class=\"flex\">\r\n            <div class=\"w-[50%] p-6\">\r\n                <div class=\"flex flex-col gap-y-2 p-4\">\r\n                    <!-- Card -->\r\n                    <div class=\"rounded-xl w-full h-[110px] flex overflow-hidden outline-2 outline-[#1a1b1e] border-2 border-[#1a1b1e]\"\r\n                        v-for=\"(jogo, index) in jogos\" :key=\"jogo.id\">\r\n                        <div class=\"w-full relative h-full\">\r\n                            <div\r\n                                class=\"rounded-md w-[65px] absolute h-auto overflow-hidden z-50 top-1/2 start-[20px] -translate-y-1/2 shadow-md\">\r\n                                <img :src=\"capasJogos[jogo.id]\" class=\"object-fit w-full h-full\">\r\n                            </div>\r\n                            <div class=\"w-full h-full z-30 bg-[#262729]/80 backdrop-blur-lg absolute\"></div>\r\n                            <img :src=\"capasJogos[jogo.id]\"\r\n                                class=\"object-fit absolute w-[90%] h-auto z-20 -translate-y-1/2 top-1/2\">\r\n                            <div class=\"absolute w-full h-full gradiente-card z-40\"></div>\r\n\r\n                            <div class=\"w-full pl-24 h-full z-[100] relative\">\r\n                                <div class=\"flex flex-col w-full justify-center h-full\">\r\n                                    <div class=\"flex items-center\">\r\n                                        <div\r\n                                            class=\"w-[29px] h-[29px] rounded-lg bg-zinc-800/30 flex items-center justify-center shrink-0\">\r\n                                            <span class=\"text-zinc-50 text-[10px]\">{{ index + 1 }}</span>\r\n                                        </div>\r\n                                        <span class=\"text-sm text-start ml-2 pr-4\">{{ jogo.name }}</span>\r\n                                        <div class=\"pl-4 border-l-[1px] border-zinc-500\" v-if=\"jogo.first_release_date\">\r\n                                            <span class=\"text-xs text-zinc-500\">{{\r\n                                                formataDataUnix(jogo.first_release_date) }}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"flex w-full\">\r\n                                        <div v-if=\"jogo.genres\"\r\n                                            class=\"text-start w-full line-clamp-1 text-zinc-500 max-w-[60%]\">\r\n                                            <span v-for=\"(genreId, index) in jogo.genres\" :key=\"genreId\"\r\n                                                class=\"text-[10px] \">{{\r\n                                                    genresNomes[genreId] == \"Role-playing (RPG)\" ? \"RPG\" :\r\n                                                        genresNomes[genreId]\r\n                                                }}<span v-if=\"index !== jogo.genres.length - 1\">, </span></span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"w-[40%] p-6\"></div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    name: \"Jogos\",\r\n    data() {\r\n        return {\r\n            jogos: [],\r\n            genreIds: [],\r\n            genresNomes: {},\r\n            capasJogos: {},\r\n            plataformasJogos: {},\r\n            plataformasMapping: {}\r\n        }\r\n    },\r\n    mounted() {\r\n        this.carregaJogos()\r\n    },\r\n    methods: {\r\n        async carregaJogos() {\r\n            const body = `fields *; sort value desc; limit 6; sort rating_count desc;`;\r\n\r\n            try {\r\n                const response = await axios.post(\"/v4/games\", body, {\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Client-ID': \"i79ndcjylui2396ezi2v752sc9dze0\",\r\n                        'Authorization': `Bearer h6v8ywcqhwyyhj140u70v95rss6sga`,\r\n                        'Content-Type': 'text/plain'\r\n                    }\r\n                })\r\n                this.jogos = response.data\r\n                console.log(\"this.jogos: \" + JSON.stringify(this.jogos))\r\n                await this.carregaCapas(this.jogos.map((e) => e.id))\r\n                await this.carregaTags(this.jogos)\r\n                await this.carregaPlataformas(this.jogos)\r\n\r\n\r\n            } catch (error) {\r\n                console.error(\"Erro: \" + error)\r\n            }\r\n        },\r\n\r\n        async carregaCapas(jogosId) {\r\n            const requests = jogosId.map(async (id) => {\r\n                const body = `fields url; where game = ${id}; limit 1;`\r\n                try {\r\n                    const response = await axios.post(\"/v4/covers\", body, {\r\n                        headers: {\r\n                            'Accept': 'application/json',\r\n                            'Client-ID': \"i79ndcjylui2396ezi2v752sc9dze0\",\r\n                            'Authorization': `Bearer h6v8ywcqhwyyhj140u70v95rss6sga`,\r\n                            'Content-Type': 'text/plain'\r\n                        }\r\n                    })\r\n                    let imagem = response.data[0]\r\n                    if (imagem && imagem.url) {\r\n                        this.capasJogos[id] = imagem.url.replace(\"thumb\", \"720p\")\r\n                    }\r\n                    console.log(\"this.capaJogos: \" + this.capasJogos)\r\n                } catch (error) {\r\n                    console.error(\"Erro carregando imagem: \" + error)\r\n                }\r\n            })\r\n            await Promise.all(requests)\r\n        },\r\n\r\n        async carregaTags(jogos) {\r\n            for (let jogo of jogos) {\r\n                for (let genreId of jogo.genres) {\r\n                    if (!this.genreIds.includes(genreId)) {\r\n                        this.genreIds.push(genreId)\r\n                    }\r\n                }\r\n            }\r\n\r\n            const body = `fields name; where id = (${this.genreIds.join(\", \")});`\r\n            try {\r\n                const response = await axios.post(\"/v4/genres\", body, {\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Client-ID': \"i79ndcjylui2396ezi2v752sc9dze0\",\r\n                        'Authorization': `Bearer h6v8ywcqhwyyhj140u70v95rss6sga`,\r\n                        'Content-Type': 'text/plain'\r\n                    }\r\n                })\r\n\r\n                for (let data of response.data) {\r\n                    this.genresNomes[data.id] = data.name\r\n                }\r\n\r\n            } catch (error) {\r\n                console.error(\"Erro carregando generos: \" + error)\r\n            }\r\n            console.log(\"genreNomes: \" + this.genresNomes)\r\n        },\r\n\r\n        formataDataUnix(dataUnix) {\r\n            const timestamp = dataUnix;\r\n            const data = new Date(timestamp * 1000);\r\n            const options = { year: 'numeric' };\r\n            return data.toLocaleString('pt-BR', options)\r\n        },\r\n\r\n        async carregaPlataformas(jogos) {\r\n            let platformIds = []\r\n            for (let jogo of jogos) {\r\n                for (let platformId of jogo.platforms) {\r\n                    if (!platformIds.includes(platformId)) {\r\n                        platformIds.push(platformId)\r\n                    }\r\n                }\r\n            }\r\n\r\n            const body = `fields abbreviation, alternative_name, platform_family; where id = (${this.platformIds.join(\", \")});`\r\n\r\n            try {\r\n                const response = await axios.post(\"/v4/platforms\", body, {\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Client-ID': \"i79ndcjylui2396ezi2v752sc9dze0\",\r\n                        'Authorization': `Bearer h6v8ywcqhwyyhj140u70v95rss6sga`,\r\n                        'Content-Type': 'text/plain'\r\n                    }\r\n                })\r\n\r\n                for (let data of response.data) {\r\n                    this.plataformasJogos[data.id] = data.platform_family\r\n                }\r\n\r\n                console.log(\"Plataformas: \" + this.plataformasJogos)\r\n\r\n            } catch (error) {\r\n                console.error(\"Erro carregando plataformas: \" + error)\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.gradiente-card {\r\n    background: rgb(38, 39, 41);\r\n    background: linear-gradient(270deg, rgba(38, 39, 41, 1) 0%, rgba(0, 0, 0, 0) 76%);\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}